// Вариант 8
// Создать шаблонную функцию, меняющую порядок элементов на обратный. 
// На пример:  1 2 3 4 5 6  -  6 5 4 3 2 1. Функция должна работать с массивом любой длины.

#include <iostream>

using std::cin;
using std::cout; 
using std::endl;
using std::ostream;
using std::istream;

// предвариетльное объявление класса 
template <typename T> 
class Array;
// потока вывода
template <typename T> 
ostream& operator << ( ostream& os , const Array<T>& array );
// потока ввода
template <typename T> 
istream& operator >> ( istream& os ,  Array<T>& array );

// для начала можем реализовать класс массив  ( тут почти всё тоже самое , что и в классе string , за исключением пары функций )
template <typename T>
class Array {
	T *ptr; // указатель на начало 
	unsigned int size; // длина массива 
	
public :
	
//=======================================================================================================================================
//Конструкторы / деструктор

	// ctor по умолчнию
	Array ();
	// ctor , который принимает размер массива 
	Array (int Size) ;
	// ctor копирования 
	Array ( const Array &other ) ;
	// ctor переноса 
	Array ( Array &&other  ) ;
	// деструктор 
	~Array() { delete [] ptr; } // очищаем выделеную пмаять 
	
//=======================================================================================================================================
// Операторы 

	// оператор присваивания 
	Array & operator = (const Array &other ) ;
	// оператор сравнения 
	bool operator == (const Array &other );
	// оператор !=
	bool operator != (const Array &other ) ; // возвращаем инвертированый результат оператора ==	
	// функция объединения массивов 
	Array operator+ (const Array &other ) ;
	// операторы индексирования
	T & operator [] (int index) { return ptr[index]; } // оператор [] , чтобы мы могли получать значения элемента по индеку в массиве
	const T & operator [] ( int index ) const { return ptr[index] ;} // тут тоже самое , только работает с константными объектами  
	
//=======================================================================================================================================
// Методы 

	// функция установки /  изменения элементов массива 
	void SetArray () ;
	// функция заполнения массива рандомными числами , в интервале от 1 до 10 ( чтобы не вводить с клавиатуры каждый раз )
	void SetRandom () ;
	// метод возвращает длину массива 
	int MySize () { return size; } 	
	// Поиск по ключу
	int Finder ( const T key ) ;
	// функция , которая переворачивает массив 
	Array Reverse () ;
	// функция , которая удаляет элемент по его индексу
	void Delete_Array ();
	// функция , которая добавляет элемент по его индексу
	void Add_Array ();
	
//=======================================================================================================================================
// Дружественные функции 

	// дружественные функции больше / меньше 
	friend bool operator < ( const Array & arr1 , const Array & arr2 ) { return arr1.size < arr2.size ; }
	friend bool operator > ( const Array & arr1 , const Array & arr2 ) { return !( operator < ( arr1 , arr2 ) ); }
	
	// дружественые функции для вывода / ввода
 	friend ostream& operator << <T> ( ostream& os ,  const Array<T>& array );
 	friend istream& operator >> <T> ( istream& os ,  Array<T>& array );

};

//=======================================================================================================================================
// Функция , которая переворачивает массив - Но работает со " встроеной структурой данных - массив " , ( а не с нашим собственым классом ) 

template <typename T>
T* Reverse ( T *arr , int size );
