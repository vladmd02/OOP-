#include"functions_array implementation.cpp"

//=======================================================================================================================================
// Простой пример работы шаблоного класса Array , и функции Reverse  -

int main () {
	setlocale(LC_ALL, "Russian"); 
	
	// инициализация объекта с помощью конструктора по умолчанию
	Array <int>example (); // Поля : T *ptr; unsigned int size = 0;

	// инициализация объектов с помощью конструктора , который принимает один параметр ( size )
	Array <int>a (5);     // Поля : T *ptr; unsigned int size = 5;
	Array <int>b (5);     // Поля : T *ptr; unsigned int size = 5; 
	
	// инициализация объектов с помощью конструктора копирования
	Array <int>c (b);     // Поля : T *ptr; unsigned int size = 5; 
	
	// Работа метода MySize()
	cout << endl << " Выводим на экран размер объекта      ' a '  , типа - Array    : " << endl ;
	cout << " - Результат : " << a.MySize() << endl;
	
	cout << endl << " Выводим на экран размер объекта      ' b '  , типа - Array    : " << endl ;
	cout << " - Результат : " << b.MySize() << endl;
	
	// ввод данных с помощью оператор >> 
	cout << endl << " Ввведите пожалуйста данные объекта   ' a '  , типа - Array    : " << endl ;
	cin >> a;
	cout << endl << " Ввведите пожалуйста данные объекта   ' b '  , типа - Array    : " << endl ;
	cin >> b;
	
	// Вывод объектов на экран , с помощью операторв <<
	cout << endl << " Вывод объектов на экран - " << endl;
	cout << " Объект a : " << a << endl;
	cout << " Объект b : " << b ;
	
	// Работа оператора присваивания 
	cout<< endl << "Объекту ' c ' присвоить объект ' a ' , типа - Array " << endl << endl;
	cout << " До : " << endl << endl;
	cout << " Объект a : " << a << endl;
	cout << " Объект c : " << c ;
	cout << endl << " После присваивания - "  << endl << endl;
	// Присваивание
	c = a; 
	// Вывод новых значений
	cout << " Объект a : " << a << endl;
	cout << " Объект c : " << c ;
	
	// Функция установки / изменения данных
	cout << endl << " Изменяем данные для объекта ' a ' , типа - Array   : " << endl ;
	a.SetArray();
	
	// Вывод после использования метода Set
	cout << endl << " Новые данные объекта ' a ' , типа - Array          : " << endl ;
	cout << " Объект a : " << a ;

	// Вызов оператора ==
	cout << endl << " Проверка на равенство / неравенство  - " << endl;
	cout << " Вызываем оператор == для сравнения объектов ' c ' и ' a ' , типа Array "<< endl;
	bool equal = c == a;
	cout << " - Результат : " << equal << endl << endl;
	
	// Вызов оператора + 
	cout << " Объединить массив ' a ' , с массивом ' c ' , типа Array" << endl;
	cout << " До : " << endl ;
	cout << " Объект a : " << a ;
	cout << " Объект c : " << c ;
	//cout << " - Результат объединения : " << res << endl; 
	cout << " - Результат объединения : " << a + c << endl; 
	
	// Работа метода Finder
	cout << " В объекте ' a ' , ищем элемент со значением = ' 1 ' " << endl;
	cout << " - Результат : " << a.Finder(1) << endl << endl;
	
	// Работа метода Reverse
	cout << " Переворачиваем  объект ' a ' , типа Array " << endl;;
	a.Reverse();
	cout << " - Результат : " << a << endl;
	
	// Работа оператора []
	cout << " Пример работы оператора индексирования - " << endl;
	cout << " - Нулевой элемент объекта       ' a ' , типа Array  = " << " [ " << a [0] << " ] " << endl;
	
	// Работа оператора [] , который может работать с const объектами 
	const Array <int>d (10);
	cout << " - Нулевой элемент объекта const ' d ' , типа Array  = " << " [ " << d [0] <<  " ] " << endl << endl;
	
	// Работа оператора < ( так же можно использовать > )
	cout << " Сравниаем длину объектов ' a ' и ' d ' - ( a < d ) " << endl;
	bool comparison = a < d ;
	cout << " - Результат : " << comparison << endl << endl;
	
	// Работа метода Delete_Array
	cout << " Удаление элемента в объекте ' a '  : " << endl;
	cout << " Объект a : " << a ;
	a.Delete_Array();
	
	// Работа метода Add_Array
	cout << endl << " Добавление элемента в объекте ' a '  : " << endl;
	cout << " Объект a : " << a ;
	a.Add_Array();
	//cout << " Новый объект a : " << a ;
	
//=======================================================================================================================================
// Работа функции Reverse , для втроеных массивов 

	cout << endl <<" Так же можем проверить работу функции Reverse для ' встроеных ' массивов " << endl;
	// создаем массив , и инициализируем size 
	cout << endl << " Введите пожалуйста длину массива - " << endl;
	int size;
	cin  >> size;
	int *arr = new int [size];
	
	cout << "Рандомный массив - " << endl;
	// Заполняем наш массив рандомными числами , в интервале от 1 до 10
	for ( int i=0 ; i < size ; i++) {
		arr[i] = rand() % 10  ;
		cout <<'\t'<< arr[i] ;
 	}
 	
	// Вызов функции Reverse
	arr = Reverse ( arr , size );
	
	// Вывод на экран перевернутого массива 
	cout << endl << "Перевернутый массив - " << endl;
	for (int i=0 ; i < size ; i++ ) {
		cout << '\t'<< arr[i] ;
	}
	
	return 0;
}
